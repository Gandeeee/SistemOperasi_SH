#!/bin/bash

# ==============================================================================
# FUNGSI-FUNGSI PEMBANTU
# ==============================================================================

# Fungsi untuk menampilkan judul.
# Menggunakan figlet jika terinstal, jika tidak, menggunakan teks biasa.
# Argumen: $1 - Teks judul yang akan ditampilkan.
tampilkan_judul() {
    if command -v figlet &> /dev/null; then
        # Figlet: -c (center), -f slant (font slant). Font bisa diganti.
        figlet -c -f slant "$1"
    else
        # Fallback jika figlet tidak ada
        local judul_teks="$1"
        local panjang_judul=${#judul_teks}
        local lebar_terminal=$(tput cols 2>/dev/null || echo 80) # Dapatkan lebar terminal, default 80
        local padding_total=$((lebar_terminal - panjang_judul - 4)) # -4 untuk " #  # "
        local padding_kiri=$((padding_total / 2))
        local padding_kanan=$((padding_total - padding_kiri))

        printf "\n" # Baris kosong sebelum judul
        printf "#%.0s" $(seq 1 $lebar_terminal) | tr '0' '#' # Garis atas
        printf "\n"
        printf "# %*s%s%*s #\n" $padding_kiri "" "$judul_teks" $padding_kanan "" # Judul rata tengah
        printf "#%.0s" $(seq 1 $lebar_terminal) | tr '0' '#' # Garis bawah
        printf "\n" # Baris kosong setelah judul
    fi
}

# ==============================================================================
# FUNGSI-FUNGSI MENU UTAMA
# ==============================================================================

# Fungsi untuk menampilkan informasi jaringan.
informasi_jaringan() {
    clear # Bersihkan layar
    tampilkan_judul "Info Jaringan" # Tampilkan judul halaman
    echo ""
    echo "============================================================"
    
    # 1. Cek Koneksi Internet
    # Ping ke server DNS publik untuk tes koneksi.
    echo -n "   Status Koneksi Internet   : "
    if ping -c 1 -W 1 8.8.8.8 &> /dev/null || ping -c 1 -W 1 1.1.1.1 &> /dev/null; then
        echo "Terhubung"
    else
        echo "Putus / Tidak Terhubung"
    fi
    echo ""

    # 2. Tampilkan Konfigurasi Jaringan Lokal
    echo "   --- Konfigurasi Jaringan Lokal ---"
    echo "   Alamat IP Lokal (IPv4)    :"
    # Menampilkan semua IP v4 global (non-loopback)
    ip -4 addr show scope global | awk '/inet / {printf "     Interface %-10s : %s\n", $NF, $2}' | sed 's|/.*||'
    
    # IP utama via 'hostname -I'
    LOCAL_IPS_HOSTNAME=$(hostname -I 2>/dev/null | awk '{print $1}') 
    if [ -n "$LOCAL_IPS_HOSTNAME" ]; then
        echo "     (IP Utama via hostname -I : $LOCAL_IPS_HOSTNAME)"
    fi
    echo ""

    # Gateway utama
    echo -n "   Gateway Utama             : "
    GATEWAY=$(ip route | grep '^default' | awk '{print $3}')
    if [ -n "$GATEWAY" ]; then
        echo "$GATEWAY"
    else
        echo "Tidak ditemukan"
    fi
    echo ""

    # DNS Server
    echo "   DNS Server (dari /etc/resolv.conf):"
    if [ -f /etc/resolv.conf ] && grep -q "^nameserver" /etc/resolv.conf; then
        grep "^nameserver" /etc/resolv.conf | awk '{print "     " $2}'
    else
        echo "     Tidak ada nameserver dikonfigurasi atau file tidak ditemukan."
    fi
    echo ""

    # 3. Tampilkan IP Publik dan Lokasi
    echo "   --- IP Publik & Lokasi ---"
    PUBLIC_IP=""
    echo "   Mencoba mengambil IP Publik..."
    # Mencoba beberapa layanan untuk mendapatkan IP publik (teks biasa)
    if command -v curl &> /dev/null; then
        PUBLIC_IP=$(curl -s --max-time 5 api.ipify.org || curl -s --max-time 5 icanhazip.com || curl -s --max-time 5 ifconfig.me/ip)
    elif command -v wget &> /dev/null; then
        PUBLIC_IP=$(wget -qO- --timeout=5 api.ipify.org || wget -qO- --timeout=5 icanhazip.com || wget -qO- --timeout=5 ifconfig.me/ip)
    fi

    # Validasi IP Publik dan proses informasi lokasi
    if [[ -n "$PUBLIC_IP" && "$PUBLIC_IP" == *.* && "$PUBLIC_IP" != *"<html>"* && "$PUBLIC_IP" != *"<HTML>"* ]]; then
        echo "   IP Publik Anda adalah       : $PUBLIC_IP"
        echo "   Mencoba mengambil info lokasi (via ipinfo.io & ip-api.com)..."

        LOCATION_INFO_JSON="" # Untuk ipinfo.io (JSON)
        TOKEN_IPINFO="" # Token API ipinfo.io (opsional)
        URL_IPINFO="ipinfo.io/$PUBLIC_IP"
        [ -n "$TOKEN_IPINFO" ] && URL_IPINFO="$URL_IPINFO?token=$TOKEN_IPINFO" # Tambah token jika ada

        # Ambil data dari ipinfo.io
        if command -v wget &> /dev/null; then
            LOCATION_INFO_JSON=$(wget -qO- --timeout=7 "$URL_IPINFO")
        elif command -v curl &> /dev/null; then
            LOCATION_INFO_JSON=$(curl -s --max-time 7 "$URL_IPINFO")
        fi
        
        # Parse JSON dari ipinfo.io
        CITY_IO=$(echo "$LOCATION_INFO_JSON" | grep -oP '"city":\s*"\K[^"]*')
        REGION_IO=$(echo "$LOCATION_INFO_JSON" | grep -oP '"region":\s*"\K[^"]*')
        COUNTRY_IO=$(echo "$LOCATION_INFO_JSON" | grep -oP '"country":\s*"\K[^"]*')
        ORG_IO=$(echo "$LOCATION_INFO_JSON" | grep -oP '"org":\s*"\K[^"]*')
        POSTAL_IO=$(echo "$LOCATION_INFO_JSON" | grep -oP '"postal":\s*"\K[^"]*')
        TIMEZONE_IO=$(echo "$LOCATION_INFO_JSON" | grep -oP '"timezone":\s*"\K[^"]*')

        if [ -n "$CITY_IO" ] || [ -n "$REGION_IO" ] || [ -n "$COUNTRY_IO" ]; then
            echo "     Detail Lokasi (dari ipinfo.io):"
            printf "       %-28s : %s\n" "Kota" "${CITY_IO:-Tidak dapat ditentukan}"
            printf "       %-28s : %s\n" "Wilayah (Region)" "${REGION_IO:-Tidak dapat ditentukan}"
            printf "       %-28s : %s\n" "Negara" "${COUNTRY_IO:-Tidak dapat ditentukan}"
            printf "       %-28s : %s\n" "Kode Pos" "${POSTAL_IO:-Tidak dapat ditentukan}"
            printf "       %-28s : %s\n" "Zona Waktu" "${TIMEZONE_IO:-Tidak dapat ditentukan}"
            printf "       %-28s : %s\n" "Organisasi/ISP" "${ORG_IO:-Tidak dapat ditentukan}"
        else
            echo "     Gagal parse dari ipinfo.io atau data tidak lengkap. Mencoba ip-api.com..."
            LOCATION_ALT_LINE="" # Untuk ip-api.com (format line)
            URL_IPAPI="http://ip-api.com/line/${PUBLIC_IP}?fields=status,message,country,regionName,city,zip,timezone,isp,org"
            
            # Ambil data dari ip-api.com
            if command -v wget &> /dev/null; then
                LOCATION_ALT_LINE=$(wget -qO- --timeout=7 "$URL_IPAPI")
            elif command -v curl &> /dev/null; then
                 LOCATION_ALT_LINE=$(curl -s --max-time 7 "$URL_IPAPI")
            fi

            # Parse format line dari ip-api.com
            if echo "$LOCATION_ALT_LINE" | grep -q -E "^success"; then # Cek status sukses (baris pertama)
                echo "     Detail Lokasi (dari ip-api.com):"
                # awk untuk mengambil nilai setelah baris nama field
                COUNTRY_ALT=$(echo "$LOCATION_ALT_LINE" | awk 'NR==2 {print}')
                REGION_ALT=$(echo "$LOCATION_ALT_LINE" | awk 'NR==3 {print}')
                CITY_ALT=$(echo "$LOCATION_ALT_LINE" | awk 'NR==4 {print}')
                ZIP_ALT=$(echo "$LOCATION_ALT_LINE" | awk 'NR==5 {print}')
                TIMEZONE_ALT=$(echo "$LOCATION_ALT_LINE" | awk 'NR==6 {print}')
                ISP_ALT=$(echo "$LOCATION_ALT_LINE" | awk 'NR==7 {print}')
                ORG_ALT=$(echo "$LOCATION_ALT_LINE" | awk 'NR==8 {print}')
                
                printf "       %-28s : %s\n" "Kota" "${CITY_ALT:-Tidak dapat ditentukan}"
                printf "       %-28s : %s\n" "Wilayah (Region)" "${REGION_ALT:-Tidak dapat ditentukan}"
                printf "       %-28s : %s\n" "Negara" "${COUNTRY_ALT:-Tidak dapat ditentukan}"
                printf "       %-28s : %s\n" "Kode Pos" "${ZIP_ALT:-Tidak dapat ditentukan}"
                printf "       %-28s : %s\n" "Zona Waktu" "${TIMEZONE_ALT:-Tidak dapat ditentukan}"
                printf "       %-28s : %s\n" "ISP" "${ISP_ALT:-Tidak dapat ditentukan}"
                printf "       %-28s : %s\n" "Organisasi" "${ORG_ALT:-Tidak dapat ditentukan}"
            else
                echo "     Gagal mengambil detail lokasi dari ipinfo.io maupun ip-api.com."
                API_MSG=$(echo "$LOCATION_ALT_LINE" | awk 'NR==2 {print}') # Baris kedua biasanya berisi pesan error
                [ -n "$API_MSG" ] && echo "     Pesan dari ip-api.com: $API_MSG"
            fi
        fi
    else
        echo "   Tidak dapat mengambil IP Publik atau format IP tidak valid."
        echo "   Pastikan wget/curl terinstall dan Anda terhubung ke internet."
        if [[ "$PUBLIC_IP" == *"<html>"* || "$PUBLIC_IP" == *"<HTML>"* ]]; then
            echo "     (Terdeteksi output HTML dari layanan IP publik, bukan alamat IP murni)"
        fi
    fi
    echo "============================================================"
    echo ""
}

# Fungsi untuk menampilkan informasi pengguna.
informasi_user() {
    clear # Bersihkan layar
    tampilkan_judul "Info User" # Tampilkan judul halaman
    echo ""
    echo "============================================================"
    CURRENT_USER=$(id -un) # Dapatkan nama user saat ini
    
    # Informasi dasar pengguna
    printf "   %-32s : %s\n" "Nama User Saat Ini" "$CURRENT_USER"
    printf "   %-32s : %s\n" "User ID (UID)" "$(id -u $CURRENT_USER)"
    printf "   %-32s : %s\n" "Group ID (GID Utama)" "$(id -g $CURRENT_USER)"
    printf "   %-32s : %s\n" "Nama Grup Utama" "$(id -gn $CURRENT_USER)"
    printf "   %-32s : %s\n" "Anggota Grup Lain" "$(groups $CURRENT_USER)"
    printf "   %-32s : %s\n" "Direktori Home" "$HOME"
    printf "   %-32s : %s\n" "Shell Login" "$SHELL"
    printf "   %-32s : %s\n" "Terminal Saat Ini" "$(tty)"
    echo ""
    
    # Informasi sesi login aktif
    echo "   --- Informasi Sesi Login Saat Ini (perintah 'w') ---"
    if command -v w &> /dev/null; then
        w $CURRENT_USER | sed 's/^/     /' # Tambah indentasi
    else
        echo "     Perintah 'w' tidak ditemukan."
    fi
    echo ""
    
    # Riwayat login terakhir
    echo "   --- Riwayat Login Terakhir (5 entri untuk user $CURRENT_USER) ---"
    if command -v last &> /dev/null; then
        last -n 5 $CURRENT_USER | sed 's/^/     /' # Tambah indentasi
    else
        echo "     Perintah 'last' tidak ditemukan."
    fi
    echo ""
    
    # Penggunaan disk di direktori home
    echo "   --- Penggunaan Disk oleh User di Direktori Home ---"
    if [ -d "$HOME" ]; then
        du -sh "$HOME" | awk '{printf "     Total Penggunaan: %s\tDirektori: %s\n", $1, $2}'
    else
        echo "     Direktori home ($HOME) tidak ditemukan."
    fi
    echo "============================================================"
    echo ""
}

# ==============================================================================
# PROGRAM UTAMA (MENU)
# ==============================================================================

clear # Bersihkan layar saat program pertama kali dijalankan
while true; do
    clear # Bersihkan layar untuk setiap iterasi menu
    tampilkan_judul "Menu Biasa Aja" # Judul utama aplikasi
    echo ""

    # Definisi lebar konten menu (tanpa border)
    menu_content_width=35 
    # Total lebar baris tabel (konten + padding + border)
    total_line_width=$((menu_content_width + 6)) 

    # Fungsi untuk mencetak garis horizontal tabel
    print_horizontal_line() {
        printf "+%.0s" $(seq 1 $total_line_width) | tr '0' '-'
        printf "\n"
    }

    # Fungsi untuk mencetak baris opsi menu
    print_menu_option() {
        local option_text="$1"
        printf "|   %-*.*s   |\n" $menu_content_width $menu_content_width "$option_text"
    }
    
    # Tampilkan kotak menu
    print_horizontal_line
    print_menu_option "1. Inpo Jaringan"
    print_menu_option "2. Inpo User"
    print_menu_option "3. Exit Program"
    print_horizontal_line
    echo ""

    # Input pengguna supaya lebh rpi
    # Menggunakan printf untuk indentasi yang konsisten
    read -p "Pilih opsi [1-3]: " pilihan
    echo "" # Baris kosong setelah input

    case $pilihan in
        1) 
            informasi_jaringan
            printf "\n%*s" $(( (total_line_width - 38) / 2 )) "" # Indentasi
            read -n 1 -s -r -p "Tekan tombol apa saja untuk kembali..."
            ;;
        2) 
            informasi_user
            printf "\n%*s" $(( (total_line_width - 38) / 2 )) "" # Indentasi
            read -n 1 -s -r -p "Tekan tombol apa saja untuk kembali..."
            ;;
        3) 
            clear
            tampilkan_judul "XIE XIE BANG" # Pesan keluar
            sleep 2 # Jeda sebelum keluar
            clear
            exit 0 # Keluar dari program
            ;;
        *) 
            clear
            tampilkan_judul "Input Salah!" # Judul untuk input tidak valid
            if command -v figlet &> /dev/null; then
                # Pesan error dengan figlet jika ada
                figlet -c -w 60 "Pilihan '$pilihan' Gak Ada Bang!"
            else
                echo ""
                echo "   Pilihan '$pilihan' tidak valid! Silakan coba lagi."
            fi
            echo ""
            printf "%*s" $(( (total_line_width - 38) / 2 )) "" # Indentasi
            read -n 1 -s -r -p "Tekan tombol apa saja untuk lanjut..."
            ;;
    esac
done
