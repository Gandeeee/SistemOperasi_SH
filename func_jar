informasi_jaringan() {
    clear
    tampilkan_judul "Info Jaringan"
    echo -e "${DIM}=====================================================================${NC}"

    # Cek koneksi internet
    printf "%-30s: " "Status Koneksi Internet"
    if ping -c 1 -W 1 8.8.8.8 &> /dev/null || ping -c 1 -W 1 1.1.1.1 &> /dev/null; then
        echo -e "${BRIGHT_GREEN}✔ Terhubung${NC}"
    else
        echo -e "${BRIGHT_RED}❌ Putus / Tidak Terhubung${NC}"
    fi
    echo ""

    # Status koneksi LAN/WiFi
    echo -e "${YELLOW}--- Status Koneksi LAN / Wi-Fi ---${NC}"
    if command -v nmcli &> /dev/null; then
        local table_line="${DIM}+-----------------+------------+---------------+--------------------------+${NC}"
        echo -e "$table_line"
        printf "| ${BOLD}%-15s${NC} | ${BOLD}%-10s${NC} | ${BOLD}%-13s${NC} | ${BOLD}%-24s${NC} |\n" "DEVICE" "TYPE" "STATE" "CONNECTION"
        echo -e "$table_line"
        nmcli -t -f DEVICE,TYPE,STATE,CONNECTION dev status | grep -v 'loopback' | while IFS=: read -r device type state connection; do
            [[ -z "$connection" ]] && connection="--"
            local state_color="$NC"
            [[ "$state" == "connected" ]] && state_color="${GREEN}"
            [[ "$state" == "disconnected" ]] && state_color="${RED}"
            printf "| ${CYAN}%-15s${NC} | %-10s | ${state_color}%-13s${NC} | ${BRIGHT_GREEN}%-24s${NC} |\n" "$device" "$type" "$state" "$connection"
        done
        echo -e "$table_line"
    else
        echo -e "${RED}Perintah 'nmcli' tidak ditemukan. Fitur ini memerlukan NetworkManager.${NC}"
    fi
    echo ""

    # Konfigurasi umum
    local GATEWAY=$(ip route | grep '^default' | awk '{print $3}')
    readarray -t DNS_SERVERS < <(grep "^nameserver" /etc/resolv.conf 2>/dev/null | awk '{print $2}')

    # IP Publik
    local PUBLIC_IP=""
    if command -v curl &> /dev/null; then 
        PUBLIC_IP=$(curl -s --max-time 5 api.ipify.org) || \
        PUBLIC_IP=$(curl -s --max-time 5 ifconfig.me) || \
        PUBLIC_IP=$(curl -s --max-time 5 checkip.amazonaws.com | tr -d '\n')
    fi

    # Info lokasi berdasarkan IP Publik
    local CITY="N/A" REGION="N/A" COUNTRY="N/A" ORG="N/A" TIMEZONE="N/A" POSTAL="N/A"
    if [[ -n "$PUBLIC_IP" ]]; then
        echo -e "${DIM}Mengambil informasi lokasi...${NC}"
        local LOCATION_INFO_JSON=$(curl -s --max-time 10 "https://ipinfo.io/$PUBLIC_IP/json")
        if [[ -z "$LOCATION_INFO_JSON" || "$LOCATION_INFO_JSON" == *"error"* ]]; then
            LOCATION_INFO_JSON=$(curl -s --max-time 10 "http://ip-api.com/json/$PUBLIC_IP")
            if [[ "$LOCATION_INFO_JSON" != *"fail"* ]]; then
                CITY=$(echo "$LOCATION_INFO_JSON" | grep -oP '"city":\s*"\K[^"]*')
                REGION=$(echo "$LOCATION_INFO_JSON" | grep -oP '"regionName":\s*"\K[^"]*')
                COUNTRY=$(echo "$LOCATION_INFO_JSON" | grep -oP '"country":\s*"\K[^"]*')
                ORG=$(echo "$LOCATION_INFO_JSON" | grep -oP '"isp":\s*"\K[^"]*')
                TIMEZONE=$(echo "$LOCATION_INFO_JSON" | grep -oP '"timezone":\s*"\K[^"]*')
                POSTAL=$(echo "$LOCATION_INFO_JSON" | grep -oP '"zip":\s*"\K[^"]*')
            fi
        else
            CITY=$(echo "$LOCATION_INFO_JSON" | grep -oP '"city":\s*"\K[^"]*')
            REGION=$(echo "$LOCATION_INFO_JSON" | grep -oP '"region":\s*"\K[^"]*')
            COUNTRY=$(echo "$LOCATION_INFO_JSON" | grep -oP '"country":\s*"\K[^"]*')
            ORG=$(echo "$LOCATION_INFO_JSON" | grep -oP '"org":\s*"\K[^"]*')
            TIMEZONE=$(echo "$LOCATION_INFO_JSON" | grep -oP '"timezone":\s*"\K[^"]*')
            POSTAL=$(echo "$LOCATION_INFO_JSON" | grep -oP '"postal":\s*"\K[^"]*')
        fi
    fi

    # Gabungkan lokasi jika tersedia
    local FULL_LOCATION="N/A"
    if [[ -n "$CITY" || -n "$REGION" || -n "$COUNTRY" ]]; then
        FULL_LOCATION=$(printf "%s, %s, %s" "${CITY:-N/A}" "${REGION:-N/A}" "${COUNTRY:-N/A}" | sed 's/,\s*N\/A//g' | sed 's/N\/A,\s*//g')
    fi

    # Tabel konfigurasi umum
    echo -e "${YELLOW}--- Konfigurasi Umum & IP Publik ---${NC}"
    local config_line="${DIM}+-------------------------+------------------------------------------+${NC}"
    echo -e "$config_line"
    printf "| ${BOLD}%-23s${NC} | ${BOLD}%-40s${NC} |\n" "INFORMASI" "DETAIL"
    echo -e "$config_line"
    printf "| %-23s | ${CYAN}%-40s${NC} |\n" "Gateway Utama" "${GATEWAY:-Tidak Ditemukan}"
    local i=1
    for dns in "${DNS_SERVERS[@]}"; do
        printf "| %-23s | ${CYAN}%-40s${NC} |\n" "DNS Server $i" "$dns"
        i=$((i+1))
    done
    printf "| %-23s | ${BRIGHT_GREEN}%-40s${NC} |\n" "IP Publik" "${PUBLIC_IP:-Tidak Terhubung}"
    printf "| %-23s | ${BRIGHT_GREEN}%-40s${NC} |\n" "Lokasi IP Publik" "$FULL_LOCATION"
    printf "| %-23s | ${CYAN}%-40s${NC} |\n" "Kode Pos" "${POSTAL:-N/A}"
    printf "| %-23s | ${CYAN}%-40s${NC} |\n" "Zona Waktu" "${TIMEZONE:-N/A}"
    printf "| %-23s | ${CYAN}%-40s${NC} |\n" "Provider/ISP" "${ORG:-N/A}"
    echo -e "$config_line"
    echo ""

    # IP Lokal
    echo -e "${YELLOW}--- Alamat IP Lokal dengan Netmask ---${NC}"
    local ip_table_line="${DIM}+-----------------+------------------+------------------+${NC}"
    echo -e "$ip_table_line"
    printf "| ${BOLD}%-15s${NC} | ${BOLD}%-16s${NC} | ${BOLD}%-16s${NC} |\n" "INTERFACE" "ALAMAT IP" "NETMASK/CIDR"
    echo -e "$ip_table_line"
    ip -4 addr show scope global | awk '/inet / {print $NF, $2}' | while read -r interface ip_cidr; do
        local ip_clean=$(echo "$ip_cidr" | cut -d'/' -f1)
        local cidr=$(echo "$ip_cidr" | cut -d'/' -f2)
        local netmask=""
        case $cidr in
            8)  netmask="255.0.0.0" ;;
            16) netmask="255.255.0.0" ;;
            24) netmask="255.255.255.0" ;;
            25) netmask="255.255.255.128" ;;
            26) netmask="255.255.255.192" ;;
            27) netmask="255.255.255.224" ;;
            28) netmask="255.255.255.240" ;;
            29) netmask="255.255.255.248" ;;
            30) netmask="255.255.255.252" ;;
            *)  netmask="/$cidr" ;;
        esac
        local display_mask="$netmask"
        [[ "$netmask" != "/$cidr" ]] && display_mask="$netmask (/$cidr)"
        printf "| ${CYAN}%-15s${NC} | ${GREEN}%-16s${NC} | ${YELLOW}%-16s${NC} |\n" "$interface" "$ip_clean" "$display_mask"
    done
    echo -e "$ip_table_line"

    # Status interface
    echo ""
    echo -e "${YELLOW}--- Status Interface Network ---${NC}"
    local status_line="${DIM}+-----------------+----------+------------+-------------------+${NC}"
    echo -e "$status_line"
    printf "| ${BOLD}%-15s${NC} | ${BOLD}%-8s${NC} | ${BOLD}%-10s${NC} | ${BOLD}%-17s${NC} |\n" "INTERFACE" "STATUS" "KECEPATAN" "MAC ADDRESS"
    echo -e "$status_line"
    for interface in $(ip link show | awk -F': ' '/^[0-9]+:/ {print $2}' | grep -v lo); do
        local status=$(ip link show "$interface" | grep -oP 'state \K\w+')
        local mac=$(ip link show "$interface" | grep -oP 'link/ether \K[a-f0-9:]+')
        local speed="N/A"
        if [ -f "/sys/class/net/$interface/speed" ]; then
            local speed_mbps=$(cat "/sys/class/net/$interface/speed" 2>/dev/null)
            if [[ "$speed_mbps" =~ ^[0-9]+$ ]]; then
                [[ "$speed_mbps" -ge 1000 ]] && speed="$((speed_mbps/1000))Gbps" || speed="${speed_mbps}Mbps"
            fi
        fi
        local status_color="$RED"
        [[ "$status" == "UP" ]] && status_color="$GREEN"
        printf "| ${CYAN}%-15s${NC} | ${status_color}%-8s${NC} | %-10s | ${DIM}%-17s${NC} |\n" "$interface" "$status" "$speed" "${mac:-N/A}"
    done
    echo -e "$status_line"
    echo -e "${DIM}=====================================================================${NC}"
    echo ""
}
