#!/bin/bash

# ==============================================================================
# DEFINISI WARNA (ANSI ESCAPE CODES)
# ==============================================================================
# Anda dapat mengubah kode warna di sini untuk menyesuaikan tema.
# Format: \e[<GAYA>;<KODE_WARNA>m
# Contoh: \e[1;34m (Tebal, Biru)

# Gaya Teks
BOLD='\e[1m'
DIM='\e[2m'
UNDERLINE='\e[4m'

# Warna Teks
BLACK='\e[30m'
RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
BLUE='\e[34m'
MAGENTA='\e[35m'
CYAN='\e[36m'
WHITE='\e[37m'
ORANGE='\e[38;5;208m'

# Warna Teks Cerah
BRIGHT_RED='\e[91m'
BRIGHT_GREEN='\e[92m'
BRIGHT_YELLOW='\e[93m'
BRIGHT_BLUE='\e[94m'
BRIGHT_MAGENTA='\e[95m'
BRIGHT_CYAN='\e[96m'

# Reset
NC='\e[0m' # No Color - kembali ke default

# ==============================================================================
# FUNGSI-FUNGSI PEMBANTU
# ==============================================================================

# Fungsi untuk menampilkan judul (RATA KIRI).
# Menggunakan figlet jika terinstal, jika tidak, menggunakan teks biasa.
# Argumen: $1 - Teks judul yang akan ditampilkan.
tampilkan_judul() {
    # Ini untuk memeriksa apakah perintah figlet tersedia di sistem.
    if command -v figlet &> /dev/null; then
        # Menampilkan judul menggunakan figlet RATA KIRI dengan warna Cyan cerah.
        printf "${BRIGHT_CYAN}"
        figlet -f slant "$1"
        printf "${NC}"
    else
        # Alternatif RATA KIRI jika figlet tidak terinstal.
        local judul_teks="$1"
        local panjang_judul=${#judul_teks}
        local garis_batas=$(printf "#%.0s" $(seq 1 $((panjang_judul + 4))) | tr '0' '#')

        printf "\n${BRIGHT_CYAN}%s${NC}\n" "$garis_batas"
        printf "${BRIGHT_CYAN}# %s #${NC}\n" "$judul_teks"
        printf "${BRIGHT_CYAN}%s${NC}\n\n" "$garis_batas"
    fi
}

# ==============================================================================
# FUNGSI-FUNGSI MENU UTAMA (SEMUA OUTPUT RATA KIRI)
# ==============================================================================

# Fungsi untuk menampilkan sapaan dan waktu (VERSI TABEL RAPI)
sapa_pengguna() {
    clear
    tampilkan_judul "Greeting User"
    
    # --- Mengumpulkan Informasi ---
    local NAMA_USER=$(id -un)
    local JAM=$(date +%H)
    local SAPAAN

    if [[ "$JAM" -ge 4 && "$JAM" -lt 11 ]]; then
        SAPAAN="Selamat Pagi"
    elif [[ "$JAM" -ge 11 && "$JAM" -lt 15 ]]; then
        SAPAAN="Selamat Siang"
    elif [[ "$JAM" -ge 15 && "$JAM" -lt 19 ]]; then
        SAPAAN="Selamat Sore"
    else
        SAPAAN="Selamat Malam"
    fi

    local SALAM_PEMBUKA="Halo ${BOLD}${ORANGE}$NAMA_USER${NC}, $SAPAAN!"
    local TANGGAL_LENGKAP=$(date +"%A, %d %B %Y")
    local WAKTU_SEKARANG=$(date +"%T %Z")
    local HARI_KE=$(date +%j)
    local MINGGU_KE=$(date +%V)
    local LOKASI="Surabaya, Jawa Timur"

    # --- Menampilkan Output dalam Format Tabel ---
    echo ""
    echo -e "$SALAM_PEMBUKA" # -e diperlukan untuk interpretasi warna
    echo ""

    # Mendefinisikan garis tabel dengan warna
    local table_line="${DIM}+---------------------------+---------------------------------------+${NC}"
    
    echo -e "$table_line"
    # Header tabel dengan warna
    printf "| ${BOLD}${YELLOW}%-25s${NC} | ${BOLD}${YELLOW}%-37s${NC} |\n" "INFORMASI" "DETAIL"
    echo -e "$table_line"
    # Isi tabel dengan warna
    printf "| %-25s | ${CYAN}%-37s${NC} |\n" "Tanggal Hari Ini" "$TANGGAL_LENGKAP"
    printf "| %-25s | ${CYAN}%-37s${NC} |\n" "Waktu Saat Ini" "$WAKTU_SEKARANG"
    printf "| %-25s | ${CYAN}%-37s${NC} |\n" "Info Kalender" "Hari ke-$HARI_KE (Minggu ke-$MINGGU_KE)"
    printf "| %-25s | ${CYAN}%-37s${NC} |\n" "Perkiraan Lokasi Anda" "$LOKASI"
    echo -e "$table_line"
    
    echo ""
}

# Fungsi untuk menampilkan informasi jaringan (PERBAIKAN TABEL IP)
informasi_jaringan() {
    clear
    tampilkan_judul "Info Jaringan"
    echo -e "${DIM}=====================================================================${NC}"
    
    # 1. Cek Koneksi Internet
    printf "%-30s: " "Status Koneksi Internet"
    if ping -c 1 -W 1 8.8.8.8 &> /dev/null || ping -c 1 -W 1 1.1.1.1 &> /dev/null; then
        echo -e "${BRIGHT_GREEN}✔ Terhubung${NC}"
    else
        echo -e "${BRIGHT_RED}❌ Putus / Tidak Terhubung${NC}"
    fi
    echo ""

    # 2. Status Koneksi LAN / Wi-Fi
    echo -e "${YELLOW}--- Status Koneksi LAN / Wi-Fi ---${NC}"
    if command -v nmcli &> /dev/null; then
        local table_line="${DIM}+-----------------+------------+---------------+--------------------------+${NC}"
        echo -e "$table_line"
        printf "| ${BOLD}%-15s${NC} | ${BOLD}%-10s${NC} | ${BOLD}%-13s${NC} | ${BOLD}%-24s${NC} |\n" "DEVICE" "TYPE" "STATE" "CONNECTION"
        echo -e "$table_line"
        nmcli -t -f DEVICE,TYPE,STATE,CONNECTION dev status | grep -v 'loopback' | while IFS=: read -r device type state connection; do
            if [[ -z "$connection" ]]; then connection="--"; fi
            # Memberi warna pada state
            local state_color="$NC"
            if [[ "$state" == "connected" ]]; then state_color="${GREEN}"; elif [[ "$state" == "disconnected" ]]; then state_color="${RED}"; fi
            printf "| ${CYAN}%-15s${NC} | %-10s | ${state_color}%-13s${NC} | ${BRIGHT_GREEN}%-24s${NC} |\n" "$device" "$type" "$state" "$connection"
        done
        echo -e "$table_line"
    else
        echo -e "${RED}Perintah 'nmcli' tidak ditemukan. Fitur ini memerlukan NetworkManager.${NC}"
    fi
    echo ""

    # --- Bagian 3 & 4 digabung dan dirapikan ---
    local GATEWAY=$(ip route | grep '^default' | awk '{print $3}')
    readarray -t DNS_SERVERS < <(grep "^nameserver" /etc/resolv.conf 2>/dev/null | awk '{print $2}')
    local PUBLIC_IP
    if command -v curl &> /dev/null; then PUBLIC_IP=$(curl -s --max-time 5 api.ipify.org); fi
    local CITY="N/A" REGION="N/A" COUNTRY="N/A" ORG="N/A"
    if [[ -n "$PUBLIC_IP" ]]; then
        LOCATION_INFO_JSON=$(curl -s --max-time 7 "ipinfo.io/$PUBLIC_IP?token=YOUR_IPINFO_TOKEN") # Ganti dengan token Anda
        CITY=$(echo "$LOCATION_INFO_JSON" | grep -oP '"city":\s*"\K[^"]*')
        REGION=$(echo "$LOCATION_INFO_JSON" | grep -oP '"region":\s*"\K[^"]*')
        COUNTRY=$(echo "$LOCATION_INFO_JSON" | grep -oP '"country":\s*"\K[^"]*')
        ORG=$(echo "$LOCATION_INFO_JSON" | grep -oP '"org":\s*"\K[^"]*')
    fi

    echo -e "${YELLOW}--- Konfigurasi Umum & IP Publik ---${NC}"
    local config_line="${DIM}+-------------------------+------------------------------------------+${NC}"
    echo -e "$config_line"
    printf "| ${BOLD}%-23s${NC} | ${BOLD}%-40s${NC} |\n" "INFORMASI" "DETAIL"
    echo -e "$config_line"
    printf "| %-23s | ${CYAN}%-40s${NC} |\n" "Gateway Utama" "${GATEWAY:-Tidak Ditemukan}"
    local i=1
    for dns in "${DNS_SERVERS[@]}"; do
        printf "| %-23s | ${CYAN}%-40s${NC} |\n" "DNS Server $i" "$dns"
        i=$((i+1))
    done
    printf "| %-23s | ${BRIGHT_GREEN}%-40s${NC} |\n" "IP Publik" "${PUBLIC_IP:-Tidak Terhubung}"
    printf "| %-23s | ${CYAN}%-40s${NC} |\n" "Kota / Negara" "${CITY:-N/A} / ${COUNTRY:-N/A}"
    printf "| %-23s | ${CYAN}%-40s${NC} |\n" "Wilayah" "${REGION:-N/A}"
    printf "| %-23s | ${CYAN}%-40s${NC} |\n" "Provider/Organisasi" "${ORG:-N/A}"
    echo -e "$config_line"
    echo ""

    # --- Menampilkan Tabel Alamat IP Lokal ---
    echo -e "${YELLOW}--- Alamat IP Lokal (IPv4) ---${NC}"
    local ip_table_line="${DIM}+-----------------+------------------+${NC}"
    echo -e "$ip_table_line"
    printf "| ${BOLD}%-15s${NC} | ${BOLD}%-16s${NC} |\n" "INTERFACE" "ALAMAT IP"
    echo -e "$ip_table_line"
    ip -4 addr show scope global | awk '/inet / {print $NF, $2}' | while read -r interface ip_cidr; do
        local ip_clean=$(echo "$ip_cidr" | sed 's|/.*||')
        printf "| ${CYAN}%-15s${NC} | ${GREEN}%-16s${NC} |\n" "$interface" "$ip_clean"
    done
    echo -e "$ip_table_line"
    
    echo -e "${DIM}=====================================================================${NC}"
    echo ""
}

# Fungsi untuk menampilkan isi direktori saat ini (VERSI TABEL SIMETRIS)
daftar_direktori() {
    clear
    tampilkan_judul "Daftar Direktori"
    echo -e "${YELLOW}--- Isi Direktori Saat Ini: ${BRIGHT_YELLOW}$(pwd)${YELLOW} ---${NC}"
    echo ""

    if ! [ -n "$(find . -maxdepth 1 -mindepth 1 -print -quit)" ]; then
        echo -e "  ${DIM}(Direktori ini kosong)${NC}"
        echo ""
        echo -e "${DIM}=====================================================================${NC}"
        echo ""
        return
    fi
    
    local table_line="${DIM}+------------+----------+----------+---------+------------------+-------------------------------+"
    
    echo -e "$table_line${NC}"
    printf "| ${BOLD}%-10s${NC} | ${BOLD}%-8s${NC} | ${BOLD}%-8s${NC} | ${BOLD}%-7s${NC} | ${BOLD}%-16s${NC} | ${BOLD}%-29s${NC} |\n" "Hak Akses" "Pemilik" "Grup" "Ukuran" "Modifikasi" "Nama File/Direktori"
    echo -e "$table_line${NC}"

    for item in * .*; do
        if [[ "$item" == "." || "$item" == ".." ]]; then continue; fi
        if [ -e "$item" ]; then
            local perms=$(stat -c "%A" "$item")
            local size=$(stat -c "%s" "$item")
            local owner=$(stat -c "%U" "$item")
            local group=$(stat -c "%G" "$item")
            local mod_time=$(stat -c "%Y" "$item")
            local human_size=$(numfmt --to=iec-i --suffix=B --format="%.1f" "$size")
            local human_date=$(date -d "@$mod_time" "+%Y-%m-%d %H:%M")
            
            # Warna untuk nama file/direktori
            local item_color="$NC"
            if [ -d "$item" ]; then
                item_color="${BRIGHT_BLUE}" # Biru untuk direktori
            elif [ -x "$item" ]; then
                item_color="${BRIGHT_GREEN}" # Hijau untuk file executable
            fi
            
            printf "| ${GREEN}%-10s${NC} | %-8.8s | %-8.8s | ${ORANGE}%-7s${NC} | ${MAGENTA}%-16s${NC} | ${item_color}%-29.29s${NC} |\n" "$perms" "$owner" "$group" "$human_size" "$human_date" "$item"
        fi
    done
    
    echo -e "$table_line${NC}"
    echo ""
    echo -e "${DIM}=====================================================================${NC}"
    echo ""
}

# Fungsi untuk menampilkan informasi pengguna (VERSI FINAL PALING RAPI)
informasi_user() {
    clear
    tampilkan_judul "Info User"
    echo -e "${DIM}=====================================================================${NC}"
    
    local CURRENT_USER=$(id -un)
    local UID=$(id -u "$CURRENT_USER")
    local GID=$(id -g "$CURRENT_USER")
    local PRIMARY_GROUP=$(id -gn "$CURRENT_USER")
    local OTHER_GROUPS=$(groups "$CURRENT_USER" | cut -d' ' -f4-)
    local SHELL_PATH="$SHELL"
    local DISK_USAGE="N/A"
    if [ -d "$HOME" ]; then read -r DISK_USAGE _ < <(du -sh "$HOME"); fi

    echo -e "${YELLOW}--- Informasi Umum & Disk ---${NC}"
    local main_table_line="${DIM}+---------------------------+------------------------------------------+${NC}"
    echo -e "$main_table_line"
    printf "| ${BOLD}%-25s${NC} | ${BOLD}%-40s${NC} |\n" "INFORMASI PENGGUNA" "DETAIL"
    echo -e "$main_table_line"
    printf "| %-25s | ${BRIGHT_GREEN}%-40s${NC} |\n" "Nama User Saat Ini" "$CURRENT_USER"
    printf "| %-25s | ${CYAN}%-40s${NC} |\n" "User ID (UID)" "$UID"
    printf "| %-25s | ${CYAN}%-40s${NC} |\n" "Grup Utama" "$PRIMARY_GROUP (GID: $GID)"
    if [ -n "$OTHER_GROUPS" ]; then printf "| %-25s | %-40.40s |\n" "Anggota Grup Lain" "$OTHER_GROUPS"; fi
    printf "| %-25s | ${YELLOW}%-40s${NC} |\n" "Direktori Home" "$HOME"
    printf "| %-25s | %-40s |\n" "Shell Login" "$SHELL_PATH"
    printf "| %-25s | ${ORANGE}%-40s${NC} |\n" "Penggunaan Disk Home" "$DISK_USAGE"
    echo -e "$main_table_line"
    echo ""

    echo -e "${YELLOW}--- Sesi Login Aktif (dari 'w') ---${NC}"
    if command -v w &> /dev/null && [[ -n $(w -h "$CURRENT_USER") ]]; then
        local session_table_line="${DIM}+-----------+------------+---------+-------------------------------+"
        echo -e "$session_table_line${NC}"
        printf "| ${BOLD}%-9s${NC} | ${BOLD}%-10s${NC} | ${BOLD}%-7s${NC} | ${BOLD}%-29s${NC} |\n" "TTY" "DARI" "LOGIN" "PROSES"
        echo -e "$session_table_line${NC}"
        w | grep "^$CURRENT_USER" | while read -r user tty from login_at idle jcpu pcpu what; do
            printf "| ${GREEN}%-9s${NC} | ${CYAN}%-10s${NC} | %-7s | %-29.29s |\n" "$tty" "$from" "$login_at" "$what"
        done
        echo -e "$session_table_line${NC}"
    else
        echo -e "  ${DIM}(Tidak ada sesi login aktif atau perintah 'w' tidak ditemukan)${NC}"
    fi
    echo ""

    echo -e "${YELLOW}--- 5 Riwayat Login Terakhir (dari 'last') ---${NC}"
    if command -v last &> /dev/null && [[ -n $(last -n 5 "$CURRENT_USER" | head -n -2) ]]; then
        local hist_table_line="${DIM}+-----------------------+-----------+----------------------+"
        echo -e "$hist_table_line${NC}"
        printf "| ${BOLD}%-21s${NC} | ${BOLD}%-9s${NC} | ${BOLD}%-20s${NC} |\n" "WAKTU LOGIN" "TTY" "DARI"
        echo -e "$hist_table_line${NC}"
        last -n 5 "$CURRENT_USER" | head -n -2 | while read -r _ tty from day mon date time rest; do
             local login_time=$(printf "%s %s %s %s" "$day" "$mon" "$date" "$time")
             printf "| ${MAGENTA}%-21.21s${NC} | ${GREEN}%-9s${NC} | ${CYAN}%-20.20s${NC} |\n" "$login_time" "$tty" "$from"
        done
        echo -e "$hist_table_line${NC}"
    else
        echo -e "  ${DIM}(Tidak ada riwayat login atau perintah 'last' tidak ditemukan)${NC}"
    fi
    
    echo -e "${DIM}=====================================================================${NC}"
    echo ""
}

# Fungsi untuk menampilkan detail Sistem Operasi (PERBAIKAN TABEL DISK)
informasi_sistem() {
    clear
    tampilkan_judul "Detail OS"
    echo -e "${DIM}=============================================================================${NC}"

    local os_name="N/A"; local os_version="N/A"
    if [ -f /etc/os-release ]; then . /etc/os-release; os_name=$NAME; os_version=$VERSION; fi
    local kernel_version=$(uname -r); local arch=$(uname -m)
    local cpu_user="N/A"; local cpu_system="N/A"; local cpu_idle="N/A"
    if command -v top &> /dev/null; then
        local cpu_info=$(top -b -n 1 | grep '%Cpu(s)')
        cpu_user=$(echo "$cpu_info" | awk '{print $2}'); cpu_system=$(echo "$cpu_info" | awk '{print $4}'); cpu_idle=$(echo "$cpu_info" | awk '{print $8}')
    fi

    echo -e "${YELLOW}--- Info Umum Sistem & CPU ---${NC}"
    local table_line_1="${DIM}+-------------------------+------------------------------------------+${NC}"
    echo -e "$table_line_1"
    printf "| ${BOLD}%-23s${NC} | ${BOLD}%-40s${NC} |\n" "INFORMASI" "DETAIL"
    echo -e "$table_line_1"
    printf "| %-23s | ${BRIGHT_BLUE}%-40s${NC} |\n" "Nama OS" "$os_name"
    printf "| %-23s | %-40s |\n" "Versi" "$os_version"
    printf "| %-23s | ${CYAN}%-40s${NC} |\n" "Versi Kernel" "$kernel_version"
    printf "| %-23s | %-40s |\n" "Arsitektur" "$arch"
    # -- PERBAIKAN DI SINI --
    # Menggabungkan nilai dengan '%' sebelum padding untuk memastikan kesejajaran
    local cpu_user_val="${cpu_user}%"
    local cpu_system_val="${cpu_system}%"
    local cpu_idle_val="${cpu_idle}%"
    printf "| %-23s | ${GREEN}%-40s${NC} |\n" "CPU - Penggunaan User" "$cpu_user_val"
    printf "| %-23s | ${ORANGE}%-40s${NC} |\n" "CPU - Penggunaan System" "$cpu_system_val"
    printf "| %-23s | %-40s |\n" "CPU - Idle" "$cpu_idle_val"
    echo -e "$table_line_1"
    echo ""

    echo -e "${YELLOW}--- Penggunaan Memori ---${NC}"
    if command -v free &> /dev/null; then
        local mem_line="${DIM}+-------+---------+---------+---------+------------+-----------+${NC}"
        echo -e "$mem_line"
        printf "| ${BOLD}%-5s${NC} | ${BOLD}%-7s${NC} | ${BOLD}%-7s${NC} | ${BOLD}%-7s${NC} | ${BOLD}%-10s${NC} | ${BOLD}%-9s${NC} |\n" "Tipe" "Total" "Digunakan" "Bebas" "Shared" "Available"
        echo -e "$mem_line"
        free -h | grep -E "^Mem" | awk '{printf "| %-5s | %-7s | %-7s | %-7s | %-10s | %-9s |\n", $1, $2, $3, $4, $5, $7}'
        free -h | grep -E "^Swap" | awk '{printf "| %-5s | %-7s | %-7s | %-7s | %-10s | %-9s |\n", $1, $2, $3, $4, "--", "--"}'
        echo -e "$mem_line"
    else
        echo -e "  ${RED}Perintah 'free' tidak ditemukan.${NC}"
    fi
    echo ""

    echo -e "${YELLOW}--- Penggunaan Disk ---${NC}"
    if command -v df &> /dev/null; then
        local disk_line="${DIM}+-------------------------+---------+---------+---------+------+--------------------------------+${NC}"
        echo -e "$disk_line"
        printf "| ${BOLD}%-23s${NC} | ${BOLD}%-7s${NC} | ${BOLD}%-7s${NC} | ${BOLD}%-7s${NC} | ${BOLD}%-4s${NC} | ${BOLD}%-30s${NC} |\n" "Filesystem" "Ukuran" "Digunakan" "Tersedia" "Guna%" "Di-mount di"
        echo -e "$disk_line"
        df -h -x squashfs -x tmpfs -x devtmpfs | tail -n +2 | while read -r fs size used avail usepct mount; do
            local use_val=${usepct//%/}
            local use_color="$GREEN"
            if (( use_val >= 85 )); then use_color="$BRIGHT_RED"; elif (( use_val >= 60 )); then use_color="$YELLOW"; fi
            printf "| %-23s | %-7s | %-7s | %-7s | ${use_color}%-4s${NC} | ${CYAN}%-30.30s${NC} |\n" "$fs" "$size" "$used" "$avail" "$usepct" "$mount"
        done
        echo -e "$disk_line"
    else
        echo -e "  ${RED}Perintah 'df' tidak ditemukan.${NC}"
    fi
    
    echo -e "${DIM}=============================================================================${NC}"
    echo ""
}

# Fungsi untuk menampilkan waktu sistem (VERSI TABEL SIMETRIS)
informasi_waktu_sistem() {
    clear
    tampilkan_judul "Waktu Sistem"
    
    local waktu_boot="N/A"; local durasi_up="N/A"
    if command -v uptime &> /dev/null; then
        waktu_boot=$(uptime -s); durasi_up=$(uptime -p | sed 's/up //'); fi

    local install_date="N/A"; local install_source="Tidak dapat ditentukan"
    local sudo_cmd=""; if [[ $EUID -ne 0 ]]; then sudo_cmd="sudo"; fi

    local files_to_check=("/var/log/installer/syslog" "/var/log/installer/cloud-init.log" "/var/log/anaconda/ks.cfg" "/var/log/pacman.log")
    for file in "${files_to_check[@]}"; do
        if [ -f "$file" ]; then
            local stat_output; stat_output=$($sudo_cmd stat -c "%y" "$file" 2>/dev/null)
            if [ -n "$stat_output" ]; then
                install_date=$(echo "$stat_output" | awk '{print $1, $2}'); install_source="$file"; break; fi
        fi
    done

    if [[ "$install_date" == "N/A" ]] && command -v tune2fs &>/dev/null; then
        local root_device=$(df / | tail -n 1 | awk '{print $1}')
        local fs_creation; fs_creation=$($sudo_cmd tune2fs -l "$root_device" 2>/dev/null | grep 'Filesystem created:')
        if [ -n "$fs_creation" ]; then
            install_date=$(echo "$fs_creation" | sed 's/Filesystem created://g' | awk '{$1=$1};1')
            install_source="Waktu pembuatan partisi ($root_device)"
        fi
    fi

    echo ""
    if [[ $EUID -ne 0 && "$install_date" != "N/A" && "$install_source" != "Tidak dapat ditentukan" ]]; then
        echo -e "${DIM}Info waktu instalasi mungkin memerlukan hak akses root (sudo)...${NC}"
        echo ""
    fi

    local table_line="${DIM}+---------------------------+------------------------------------------+${NC}"
    local separator_line="${DIM}|---------------------------+------------------------------------------|${NC}"

    echo -e "$table_line"
    printf "| ${BOLD}${YELLOW}%-25s${NC} | ${BOLD}${YELLOW}%-40s${NC} |\n" "INFORMASI WAKTU" "DETAIL"
    echo -e "$table_line"
    printf "| %-25s | ${CYAN}%-40s${NC} |\n" "Waktu Boot Terakhir" "$waktu_boot"
    printf "| %-25s | ${GREEN}%-40s${NC} |\n" "Telah Berjalan Selama" "$durasi_up"
    echo -e "$separator_line"
    printf "| %-25s | ${MAGENTA}%-40s${NC} |\n" "Perkiraan Waktu Instal" "$install_date"
    printf "| %-25s | ${DIM}%-40s${NC} |\n" "Sumber Data Instalasi" "$install_source"
    echo -e "$table_line"
    echo ""
    echo -e "${DIM}=====================================================================${NC}"
    echo ""
}

# ==============================================================================
# PROGRAM UTAMA (MENU)
# ==============================================================================

clear
while true; do
    clear
    tampilkan_judul "Menu Biasa Aja"

    # Lebar konten di dalam menu (jumlah karakter)
    menu_content_width=37

    # Fungsi untuk menggambar garis horizontal dengan karakter box-drawing
    # Argumen: $1: karakter awal, $2: karakter tengah, $3: karakter akhir
    print_line() {
        printf "${DIM}$1"
        # Mencetak karakter tengah sebanyak lebar konten
        printf "$2%.0s" $(seq 1 $menu_content_width) | tr '0' "$2"
        printf "$3${NC}\n"
    }

    # Fungsi untuk mencetak opsi menu
    print_menu_option() {
        local number=$(echo "$1" | awk '{print $1}')
        local text=$(echo "$1" | cut -d' ' -f2-)
        # Teks dengan warna, ditambah spasi di awal
        local full_text="  ${YELLOW}${number}${NC} ${text}"
        
        printf "${DIM}│${NC}"
        printf "%s" "$full_text"
        
        # Hitung panjang teks yang terlihat (tanpa kode warna) untuk padding
        local visible_length=$((2 + ${#number} + 1 + ${#text}))
        
        # Kalkulasi padding untuk meratakan ke kanan
        local padding=$(($menu_content_width - visible_length))
        # Pastikan padding tidak negatif
        if (( padding < 0 )); then padding=0; fi
        printf "%${padding}s" " "

        printf "${DIM}│${NC}\n"
    }
    
    # Menampilkan menu dengan border baru yang lebih rapi
    print_line "┌" "─" "┐"
    print_menu_option "1. Greeting User"
    print_menu_option "2. Info Daftar Direktori"
    print_menu_option "3. Info Jaringan"
    print_menu_option "4. Info OS"
    print_menu_option "5. Waktu Install OS"
    print_menu_option "6. Info User"
    print_line "├" "─" "┤" # Garis pemisah
    print_menu_option "7. Exit Program"
    print_line "└" "─" "┘"
    echo ""

    # Prompt input
    read -p "$(echo -e "${BRIGHT_YELLOW}Pilih opsi [1-7]: ${NC}")" pilihan

    case $pilihan in
        1) sapa_pengguna; ;;
        2) daftar_direktori; ;;
        3) informasi_jaringan; ;;
        4) informasi_sistem; ;;
        5) informasi_waktu_sistem; ;;
        6) informasi_user; ;;
        7)
            clear
            tampilkan_judul "XIE XIE YA!"
            sleep 2
            clear
            exit 0
            ;;
        *)
            clear
            tampilkan_judul "Input Salah!"
            if command -v figlet &> /dev/null; then
                echo -e "${BRIGHT_RED}"
                figlet -w 80 "Pilihan '$pilihan' Gak Ada Bang!"
                echo -e "${NC}"
            else
                echo -e "${BRIGHT_RED}Pilihan '$pilihan' tidak valid! Silakan coba lagi.${NC}"
            fi
            ;;
    esac
    
    # Pause message hanya jika bukan pilihan exit atau invalid
    if [[ "$pilihan" =~ ^[1-6]$ ]]; then
        echo ""
        read -n 1 -s -r -p "$(echo -e "${DIM}Tekan tombol apa saja untuk kembali...${NC}")"
    # Pause message untuk input salah
    elif [[ "$pilihan" != "7" ]]; then
        echo ""
        read -n 1 -s -r -p "$(echo -e "${DIM}Tekan tombol apa saja untuk lanjut...${NC}")"
    fi
done
