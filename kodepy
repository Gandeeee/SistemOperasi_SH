# Impor pustaka yang diperlukan
from collections import defaultdict
import time
import re # Modul regular expression untuk parsing log yang lebih fleksibel
import os # Untuk memeriksa keberadaan file

# --- Konfigurasi ---
# Jumlah maksimal percobaan login gagal dari satu IP sebelum dianggap serangan.
MAX_FAILED_ATTEMPTS = 5
# Jangka waktu (dalam detik) untuk memantau percobaan gagal tersebut.
TIME_WINDOW = 300  # 5 menit
# Path ke file log SSH yang akan dipantau
# Contoh umum di Linux: '/var/log/auth.log' atau '/var/log/secure'
# Sesuaikan path ini dengan sistem Anda!
SSH_LOG_FILE = '/var/log/auth.log'
# Pola regex untuk mendeteksi percobaan login SSH yang gagal
# Pola ini mungkin perlu disesuaikan tergantung format log spesifik Anda.
# Contoh ini mencari pesan seperti "Failed password for invalid user X from Y.Y.Y.Y"
# atau "Failed password for X from Y.Y.Y.Y"
# Grup 1 akan menangkap username (opsional), Grup 2 akan menangkap alamat IP
FAILED_LOGIN_PATTERN = re.compile(
    r"Failed password for (invalid user )?(?P<username>\S+) from (?P<ip_address>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"
)
# Pola regex untuk mendeteksi login SSH yang berhasil (untuk mereset counter)
SUCCESSFUL_LOGIN_PATTERN = re.compile(
    r"Accepted publickey for (?P<username>\S+) from (?P<ip_address>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) port \d+ ssh2"
    r"|Accepted password for (?P<username>\S+) from (?P<ip_address>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) port \d+ ssh2"
)


# --- Struktur Data ---
# Kamus untuk menyimpan timestamp dari percobaan login gagal per alamat IP.
# Format: { 'ip_address': [timestamp1, timestamp2, ...], ... }
failed_logins_tracker = defaultdict(list)

# --- Fungsi Inti ---

def parse_ssh_log_line(log_line):
    """
    Menganalisis satu baris log SSH untuk mengekstrak IP dan status percobaan login.

    Args:
        log_line (str): Satu baris dari file log SSH.

    Returns:
        tuple: (str: ip_address, bool: is_login_failed)
               Mengembalikan (None, False) jika baris log tidak relevan.
    """
    match_failed = FAILED_LOGIN_PATTERN.search(log_line)
    if match_failed:
        ip_address = match_failed.group("ip_address")
        # username = match_failed.group("username") # Bisa digunakan jika perlu
        print(f"DEBUG (parse_log): Percobaan GAGAL terdeteksi dari IP: {ip_address} - Log: {log_line.strip()}")
        return ip_address, True

    match_successful = SUCCESSFUL_LOGIN_PATTERN.search(log_line)
    if match_successful:
        ip_address = match_successful.group("ip_address")
        # username = match_successful.group("username") # Bisa digunakan jika perlu
        # Jika login berhasil, reset catatan kegagalan untuk IP tersebut
        if ip_address in failed_logins_tracker:
            print(f"DEBUG (parse_log): Login BERHASIL dari IP: {ip_address}. Mereset catatan kegagalan.")
            failed_logins_tracker[ip_address] = []
        return ip_address, False

    return None, False # Baris log tidak cocok dengan pola gagal atau sukses

def check_for_brute_force(ip_address):
    """
    Memeriksa apakah alamat IP tertentu menunjukkan tanda-tanda serangan brute force.
    """
    current_time = time.time()
    timestamps = failed_logins_tracker[ip_address]

    # Saring timestamp, hanya pertahankan yang masih dalam TIME_WINDOW
    relevant_timestamps = [ts for ts in timestamps if (current_time - ts) <= TIME_WINDOW]
    failed_logins_tracker[ip_address] = relevant_timestamps # Update tracker

    if len(relevant_timestamps) >= MAX_FAILED_ATTEMPTS:
        print(f"üö® ALARM: Potensi serangan BRUTE FORCE terdeteksi dari IP: {ip_address}")
        print(f"   Detail: {len(relevant_timestamps)} percobaan login SSH gagal dalam {TIME_WINDOW} detik terakhir.")
        # Di sini Anda bisa menambahkan logika untuk tindakan lebih lanjut:
        # - Mencatat IP ke daftar blokir
        # - Mengirim notifikasi (email, Slack, dll.)
        # - Menjalankan skrip untuk memblokir IP di firewall (misalnya, menggunakan iptables atau ufw)
        # Contoh: block_ip_on_firewall(ip_address)
        return True
    return False

def follow_log_file(log_file_path):
    """
    Membaca baris baru dari file log secara terus-menerus (mirip 'tail -f').
    """
    try:
        if not os.path.exists(log_file_path):
            print(f"‚ùå ERROR: File log '{log_file_path}' tidak ditemukan.")
            return

        print(f"üîé Memantau file log: {log_file_path}")
        print(f"   Parameter Deteksi: Maksimum {MAX_FAILED_ATTEMPTS} kegagalan / {TIME_WINDOW} detik.")
        
        with open(log_file_path, 'r') as file:
            # Pindah ke akhir file untuk hanya membaca baris baru
            file.seek(0, os.SEEK_END)
            while True:
                line = file.readline()
                if not line:
                    time.sleep(0.1)  # Tunggu sebentar jika tidak ada baris baru
                    continue
                
                # Proses baris log yang baru dibaca
                # print(f"DEBUG (follow_log): Baris baru: {line.strip()}") # Untuk debugging detail
                ip, is_failed = parse_ssh_log_line(line)
                if ip and is_failed:
                    failed_logins_tracker[ip].append(time.time())
                    if check_for_brute_force(ip):
                        # Aksi jika brute force terdeteksi
                        # Anda mungkin ingin menandai IP ini agar tidak memicu alarm berulang
                        # dalam waktu singkat, atau melakukan aksi blokir.
                        pass
    except FileNotFoundError:
        print(f"‚ùå ERROR: File log '{log_file_path}' tidak ditemukan saat mencoba membuka.")
    except PermissionError:
        print(f"‚ùå ERROR: Tidak ada izin untuk membaca file log '{log_file_path}'. Coba jalankan dengan sudo.")
    except KeyboardInterrupt:
        print("\nüö´ Pemantauan log dihentikan oleh pengguna.")
    except Exception as e:
        print(f"‚ùå ERROR tak terduga saat memantau log: {e}")
    finally:
        print("‚úÖ Proses pemantauan log selesai.")

# --- Contoh Penggunaan ---
if __name__ == "__main__":
    # Jalankan fungsi pemantauan log
    follow_log_file(SSH_LOG_FILE)

    # Bagian ini mungkin tidak akan pernah tercapai jika follow_log_file berjalan dalam loop tak terbatas,
    # kecuali jika dihentikan dengan KeyboardInterrupt dan ada logika tambahan.
    print("\nüìä Status Akhir Pelacak Percobaan Gagal (jika skrip dihentikan):")
    current_time_final = time.time()
    if not failed_logins_tracker:
        print("   Tidak ada catatan percobaan gagal aktif.")
    else:
        for ip, timestamps in failed_logins_tracker.items():
            relevant_timestamps_final = [ts for ts in timestamps if (current_time_final - ts) <= TIME_WINDOW]
            if relevant_timestamps_final:
                print(f"   IP: {ip}, Jumlah percobaan gagal terkini: {len(relevant_timestamps_final)}")
